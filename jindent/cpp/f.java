package jindent.cpp;

public interface f {
   int EOF = 0;
   int SINGLE_LINE_COMMENT = 10;
   int DOXYGEN_MULTI_LINE_COMMENT = 11;
   int DOXYGEN_JAVADOC_COMMENT = 12;
   int DOXYGEN_SINGLE_LINE_COMMENT = 13;
   int MULTI_LINE_COMMENT = 14;
   int NEWLINE = 15;
   int PREPROCESSOR_OUTPUT = 18;
   int LCURLYBRACE = 19;
   int RCURLYBRACE = 20;
   int LSQUAREBRACKET = 21;
   int RSQUAREBRACKET = 22;
   int LPARENTHESIS = 23;
   int RPARENTHESIS = 24;
   int SCOPE = 25;
   int COLON = 26;
   int SEMICOLON = 27;
   int COMMA = 28;
   int QUESTIONMARK = 29;
   int ELLIPSIS = 30;
   int ASSIGNEQUAL = 31;
   int TIMESEQUAL = 32;
   int DIVIDEEQUAL = 33;
   int MODEQUAL = 34;
   int PLUSEQUAL = 35;
   int MINUSEQUAL = 36;
   int SHIFTLEFTEQUAL = 37;
   int SHIFTRIGHTEQUAL = 38;
   int BITWISEANDEQUAL = 39;
   int BITWISEXOREQUAL = 40;
   int BITWISEOREQUAL = 41;
   int OR = 42;
   int AND = 43;
   int BITWISEOR = 44;
   int BITWISEXOR = 45;
   int AMPERSAND = 46;
   int EQUAL = 47;
   int NOTEQUAL = 48;
   int LESSTHAN = 49;
   int GREATERTHAN = 50;
   int LESSTHANOREQUALTO = 51;
   int GREATERTHANOREQUALTO = 52;
   int SHIFTLEFT = 53;
   int PLUS = 54;
   int MINUS = 55;
   int STAR = 56;
   int DIVIDE = 57;
   int MOD = 58;
   int PLUSPLUS = 59;
   int MINUSMINUS = 60;
   int TILDE = 61;
   int NOT = 62;
   int DOT = 63;
   int POINTERTO = 64;
   int DOTSTAR = 65;
   int ARROWSTAR = 66;
   int AUTO = 67;
   int BREAK = 68;
   int BOOL = 69;
   int CASE = 70;
   int CATCH = 71;
   int CHAR = 72;
   int CONST = 73;
   int CONTINUE = 74;
   int _DEFAULT = 75;
   int DELETE = 76;
   int DO = 77;
   int DOUBLE = 78;
   int ELSE = 79;
   int ENUM = 80;
   int EXPLICIT = 81;
   int EXTERN = 82;
   int FLOAT = 83;
   int FOR = 84;
   int FRIEND = 85;
   int FINALLY = 86;
   int GOTO = 87;
   int IF = 88;
   int INLINE = 89;
   int INT = 90;
   int LONG = 91;
   int NEW = 92;
   int PRIVATE = 93;
   int PROTECTED = 94;
   int PUBLIC = 95;
   int REDECLARED = 96;
   int REGISTER = 97;
   int RETURN = 98;
   int SHORT = 99;
   int SIGNED = 100;
   int SIZEOF = 101;
   int STATIC = 102;
   int STRUCT = 103;
   int CLASS = 104;
   int SWITCH = 105;
   int TEMPLATE = 106;
   int THIS = 107;
   int TRY = 108;
   int TYPEDEF = 109;
   int UNION = 110;
   int UNSIGNED = 111;
   int VIRTUAL = 112;
   int VOID = 113;
   int VOLATILE = 114;
   int WHILE = 115;
   int OPERATOR = 116;
   int TRUETOK = 117;
   int FALSETOK = 118;
   int THROW = 119;
   int NAMESPACE = 120;
   int USING = 121;
   int TYPENAME = 122;
   int STATIC_CAST = 123;
   int REINTERPRET_CAST = 124;
   int CONST_CAST = 125;
   int DYNAMIC_CAST = 126;
   int OCTALINT = 127;
   int OCTALLONG = 128;
   int UNSIGNED_OCTALINT = 129;
   int UNSIGNED_OCTALLONG = 130;
   int DECIMALINT = 131;
   int DECIMALLONG = 132;
   int UNSIGNED_DECIMALINT = 133;
   int UNSIGNED_DECIMALLONG = 134;
   int HEXADECIMALINT = 135;
   int HEXADECIMALLONG = 136;
   int UNSIGNED_HEXADECIMALINT = 137;
   int UNSIGNED_HEXADECIMALLONG = 138;
   int FLOATONE = 139;
   int FLOATTWO = 140;
   int CHARACTER = 141;
   int STRING = 142;
   int ID = 143;
   int DEFAULT = 0;
   int IN_SINGLE_LINE_COMMENT = 1;
   int IN_DOXYGEN_MULTI_LINE_COMMENT = 2;
   int IN_DOXYGEN_JAVADOC_COMMENT = 3;
   int IN_DOXYGEN_SINGLE_LINE_COMMENT = 4;
   int IN_MULTI_LINE_COMMENT = 5;
   int IN_PREPROCESSOR_OUTPUT = 6;
   String[] tokenImage = new String[]{"<EOF>", "\" \"", "\"\\t\"", "\"\\f\"", "<token of kind 4>", "<token of kind 5>", "<token of kind 6>", "\"/*\"", "\"//\"", "\"#\"", "<SINGLE_LINE_COMMENT>", "\"*/\"", "\"*/\"", "<DOXYGEN_SINGLE_LINE_COMMENT>", "\"*/\"", "<NEWLINE>", "<token of kind 16>", "<token of kind 17>", "<PREPROCESSOR_OUTPUT>", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\"(\"", "\")\"", "\"::\"", "\":\"", "\";\"", "\",\"", "\"?\"", "\"...\"", "\"=\"", "\"*=\"", "\"/=\"", "\"%=\"", "\"+=\"", "\"-=\"", "\"<<=\"", "\">>=\"", "\"&=\"", "\"^=\"", "\"|=\"", "\"||\"", "\"&&\"", "\"|\"", "\"^\"", "\"&\"", "\"==\"", "\"!=\"", "\"<\"", "\">\"", "\"<=\"", "\">=\"", "\"<<\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"%\"", "\"++\"", "\"--\"", "\"~\"", "\"!\"", "\".\"", "\"->\"", "\".*\"", "\"->*\"", "\"auto\"", "\"break\"", "\"bool\"", "\"case\"", "\"catch\"", "\"char\"", "\"const\"", "\"continue\"", "\"default\"", "\"delete\"", "\"do\"", "\"double\"", "\"else\"", "\"enum\"", "\"explicit\"", "\"extern\"", "\"float\"", "\"for\"", "\"friend\"", "\"finally\"", "\"goto\"", "\"if\"", "\"inline\"", "\"int\"", "\"long\"", "\"new\"", "\"private\"", "\"protected\"", "\"public\"", "\"redeclared\"", "\"register\"", "\"return\"", "\"short\"", "\"signed\"", "\"sizeof\"", "\"static\"", "\"struct\"", "\"class\"", "\"switch\"", "\"template\"", "\"this\"", "\"try\"", "\"typedef\"", "\"union\"", "\"unsigned\"", "\"virtual\"", "\"void\"", "\"volatile\"", "\"while\"", "\"operator\"", "\"true\"", "\"false\"", "\"throw\"", "\"namespace\"", "\"using\"", "\"typename\"", "\"static_cast\"", "\"reinterpret_cast\"", "\"const_cast\"", "\"dynamic_cast\"", "<OCTALINT>", "<OCTALLONG>", "<UNSIGNED_OCTALINT>", "<UNSIGNED_OCTALLONG>", "<DECIMALINT>", "<DECIMALLONG>", "<UNSIGNED_DECIMALINT>", "<UNSIGNED_DECIMALLONG>", "<HEXADECIMALINT>", "<HEXADECIMALLONG>", "<UNSIGNED_HEXADECIMALINT>", "<UNSIGNED_HEXADECIMALLONG>", "<FLOATONE>", "<FLOATTWO>", "<CHARACTER>", "<STRING>", "<ID>", "\"\\\\\""};
}
